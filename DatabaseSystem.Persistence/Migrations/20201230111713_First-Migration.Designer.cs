// <auto-generated />
using System;
using DatabaseSystem.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseSystem.Persistence.Migrations
{
    [DbContext(typeof(TransactionalDbContext))]
    [Migration("20201230111713_First-Migration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.Lock", b =>
                {
                    b.Property<int>("LockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LockType")
                        .HasColumnType("int");

                    b.Property<string>("Object")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("LockId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Locks");
                });

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.Operation", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DatabaseQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("OperationId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.WaitForGraph", b =>
                {
                    b.Property<int>("WaitForGraphId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LockObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LockTable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LockType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionThatHasLockId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionThatWantsLockId")
                        .HasColumnType("int");

                    b.HasKey("WaitForGraphId");

                    b.HasIndex("TransactionThatHasLockId");

                    b.HasIndex("TransactionThatWantsLockId");

                    b.ToTable("WaitForGraphs");
                });

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.Lock", b =>
                {
                    b.HasOne("DatabaseSystem.Persistence.Models.Transaction", "Transaction")
                        .WithMany("Locks")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.Operation", b =>
                {
                    b.HasOne("DatabaseSystem.Persistence.Models.Transaction", "Transaction")
                        .WithMany("Operations")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.WaitForGraph", b =>
                {
                    b.HasOne("DatabaseSystem.Persistence.Models.Transaction", "TransactionThatHasLock")
                        .WithMany("WaitForGraphsHasLocks")
                        .HasForeignKey("TransactionThatHasLockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseSystem.Persistence.Models.Transaction", "TransactionThatWantsLock")
                        .WithMany("WaitForGraphsWantsLocks")
                        .HasForeignKey("TransactionThatWantsLockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TransactionThatHasLock");

                    b.Navigation("TransactionThatWantsLock");
                });

            modelBuilder.Entity("DatabaseSystem.Persistence.Models.Transaction", b =>
                {
                    b.Navigation("Locks");

                    b.Navigation("Operations");

                    b.Navigation("WaitForGraphsHasLocks");

                    b.Navigation("WaitForGraphsWantsLocks");
                });
#pragma warning restore 612, 618
        }
    }
}
